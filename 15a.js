import { readLines } from './helpers.js'

// Functions

// Generated by OpenAI
const mergeIntervals = (intervals) => {
  intervals.sort((a, b) => a[0] - b[0])
  if (intervals.length < 2) return intervals
  const result = [intervals[0]]
  for (let i = 1; i < intervals.length; i++) {
    const last = result[result.length - 1]
    const current = intervals[i]
    if (current[0] <= last[1]) {
      last[1] = Math.max(last[1], current[1])
    } else {
      result.push(current)
    }
  }
  return result
}

const getDistance = (sX, sY, bX, bY) => {
  const distX = getAxisDistance(sX, bX)
  const distY = getAxisDistance(sY, bY)

  return distY + distX
}

const getAxisDistance = (coord1, coord2) => Math.abs(coord1 - coord2)

// Constants

const TARGET_Y = 2000000

// Main

const lines = readLines('15.txt')

const intersections = []

for (const line of lines) {
  const [sX, sY, bX, bY] = line.match(/-?\d+/g).map(Number)

  const distance = getDistance(sX, sY, bX, bY)
  const targetDistY = getAxisDistance(TARGET_Y, sY)
  const remainder = distance - targetDistY

  if (remainder >= 0) {
    intersections.push([sX - remainder, sX + remainder])
  }
}

const merged = mergeIntervals(intersections)

let scanned = 0

for (const interval of merged) {
  const left = interval[0]
  const right = interval[1]

  scanned += right - left
}

console.log('scanned:', scanned)
